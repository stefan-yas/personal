---
// src/pages/wall.astro
import SwipeLayout from '../components/SwipeLayout.astro';
---
<SwipeLayout title="The Wall" prevUrl="/about">
  <main class="container" transition:animate="slide">
    <h1>The Wall</h1>
    <p>Leave a message for the world to see!</p>

    <form id="wall-form">
      <textarea id="message-input" placeholder="Say hi..." rows="4" required></textarea>
      <button type="submit">Post</button>
    </form>

    <div id="wall-messages">
      </div>
  </main>
</SwipeLayout>

<style>
  .container {
    width: 100%;
    max-width: 500px;
    margin: 2rem auto; /* Added margin for better spacing */
    padding: 0 20px;
    box-sizing: border-box;
    text-align: center;
    /* ADDED these two lines */
    max-height: 75vh; /* Limit the height */
    overflow-y: auto; /* Make it scrollable */
  }
  #wall-form {
    margin: 2rem 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  textarea {
    font-family: 'JetBrains Mono', monospace;
    padding: 1em;
    font-size: 0.98em;
    border: 2px dashed rgba(226, 133, 184, 0.7);
    width: 100%;
    box-sizing: border-box;
  }
  textarea::placeholder {
      color: #091B17;
      opacity: 0.2;
  }
  button {
    font-family: 'JetBrains Mono', monospace;
    border: 0;
    line-height: 2.5;
    padding: 0 20px;
    font-size: 1em;
    text-align: center;
    color: #194b3f;
    border: 0.5rem outset rgba(217, 161, 192, .7);
    border-radius: 10px;
    width: 100%;
    cursor: pointer;
  }
  button:active {
    box-shadow: inset -2px -2px 3px rgba(255, 255, 255, .6),
        inset 2px 2px 3px rgba(65, 62, 62, 0.6);
    background-color: rgba(168, 127, 150, 0.7);
    border: 0.5rem outset rgba(156, 114, 137, 0.7);
  }
  .message {
    background-color: rgba(221, 255, 244, 0.7);
    padding: 1rem;
    margin-bottom: 1rem;
    text-align: left;
    border-radius: 5px;
  }
  .message-time {
    font-size: 0.8rem;
    color: #594157;
  }
</style>

<script>
  interface WallMessage {
    text: string;
    timestamp: string;
  }

  const wallContainer = document.getElementById('wall-messages') as HTMLDivElement | null;
  const wallForm = document.getElementById('wall-form') as HTMLFormElement | null;

  function escapeHTML(str: string): string {
    const p = document.createElement('p');
    p.textContent = str;
    return p.innerHTML;
  }

  async function fetchMessages() {
    if (!wallContainer) return;
    try {
      const response = await fetch('/api/wall');
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const messages: WallMessage[] = await response.json();

      if (messages.length === 0) {
        wallContainer.innerHTML = '<p>No messages yet. Be the first to post!</p>';
      } else {
        wallContainer.innerHTML = messages.map(msg => `
          <div class="message">
            <p>${escapeHTML(msg.text)}</p>
            <p class="message-time">${new Date(msg.timestamp).toLocaleString()}</p>
          </div>
        `).join('');
      }
    } catch (error) {
      console.error('Error fetching messages:', error);
      wallContainer.innerHTML = '<p>Error loading messages. Please try again later.</p>';
    }
  }

  if (wallForm) {
    wallForm.addEventListener('submit', async (e: Event) => {
      e.preventDefault();

      const messageInput = document.getElementById('message-input') as HTMLTextAreaElement | null;
      const button = wallForm.querySelector('button') as HTMLButtonElement | null;

      if (!messageInput || !button) return;

      const message = messageInput.value.trim();
      if (!message) return;

      button.disabled = true;
      button.textContent = 'Posting...';

      try {
        const response = await fetch('/api/wall', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message }),
        });

        if (response.ok) {
          messageInput.value = '';
          await fetchMessages();
        } else {
          const errorData = await response.json();
          alert(`Failed to post message: ${errorData.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error posting message:', error);
        alert('An error occurred while posting. Please check the console and try again.');
      } finally {
        button.disabled = false;
        button.textContent = 'Post';
      }
    });
  }

  // Use astro:page-load for initial load and subsequent client-side navigations
  document.addEventListener('astro:page-load', fetchMessages);
</script>